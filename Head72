C++:
#include <iostream>

using namespace std;

long long factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    }
    return n * factorial(n - 1);
}

int main() {
    int n;
    cout << "Введите число n: ";
    cin >> n;
    
    long long result = factorial(n);
    cout << result << endl;

    return 0;
}
```
def count_arrangements(n):
    if n == 1:
        return 1
    return count_arrangements(n - 1) * (n + 1) // 2

n = int(input())
print(count_arrangements(n))
```
#Второе задание:


a = int(input())
b = int(input())

c = abs(10**a - 10**b)

sum_of_digits = sum(int(digit) for digit in str(c))

print(sum_of_digits)


#задание D:


from collections import deque

# Ввод данных
n = int(input("Введите размер доски (n): "))
start_col = input("Введите начальную позицию (буква): ")
start_row = int(input("Введите начальную позицию (число): "))
end_col = input("Введите конечную позицию (буква): ")
end_row = int(input("Введите конечную позицию (число): "))

# Преобразование буквенной колонки в числовую
def col_to_index(col):
    return ord(col) - ord('a') + 1

# Преобразование начальной и конечной позиции в координаты
start = (start_row, col_to_index(start_col))
end = (end_row, col_to_index(end_col))

# Проверка на возможность движения
def is_valid(x, y):
    return 1 <= x <= n and 1 <= y <= n

# BFS для поиска минимального количества ходов
def bfs(start, end):
    queue = deque([(start, 0)])  # (позиция, количество ходов)
    visited = set()
    visited.add(start)

    while queue:
        current, moves = queue.popleft()
        if current == end:
            return moves
        
        # Возможные ходы
        next_positions = [
            (current[0] + 1, current[1] + 1),  # вниз вправо
            (current[0] + 1, current[1] - 1)   # вниз влево
        ]

        for pos in next_positions:
            if is_valid(pos[0], pos[1]) and pos not in visited:
                visited.add(pos)
                queue.append((pos, moves + 1))

    return -1  # Если не удалось добраться до конечной позиции

# Вывод результата
result = bfs(start, end)
print(result)


#последнее задание (Оно не совсем правильное):


from collections import deque

# Ввод зашифрованной формулы
encoded_formula = input().strip()

# Переменные для хранения расшифрованной формулы
decoded_formula = ""
current_element = ""
current_count = 0

# Проходим по каждому символу в зашифрованной формуле
for char in encoded_formula:
    if char.isupper():  # Если символ - заглавная буква, это новый элемент
        if current_element:  # Если есть текущий элемент, добавляем его в формулу
            if current_count > 1:
                decoded_formula += current_element + str(current_count)
            elif current_count == 1:
                decoded_formula += current_element
            
        current_element = char  # Обновляем текущий элемент
        current_count = 1  # Сбрасываем счетчик
    elif char.isdigit():  # Если символ - цифра
        current_count += int(char)  # Увеличиваем счетчик на значение цифры

# Добавляем последний элемент в формулу
if current_element:
    if current_count > 1:
        decoded_formula += current_element + str(current_count)
    elif current_count == 1:
        decoded_formula += current_element

# Выводим расшифрованную формулу
print(decoded_formula)


Задание 3:


# Чтение входных данных
N = int(input())  # Количество руководителей процессов
M = int(input())  # Количество медиа-специалистов
K = int(input())  # Количество юристов

# Общее количество участников в группе
total_members = N + M + K

# Минимальное количество юристов и медиа-специалистов
min_lawyers = (total_members + 2) // 3  # Округление вверх
min_media_specialists = (total_members + 2) // 3  # Округление вверх

# Количество юристов и медиа-специалистов, которые нужно добавить
lawyers_to_add = max(0, min_lawyers - K)
media_specialists_to_add = max(0, min_media_specialists - M)

# Вывод результатов
print(lawyers_to_add)
print(media_specialists_to_add)
